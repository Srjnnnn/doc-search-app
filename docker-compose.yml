services:
  # Vector Database Services
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd-data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - doc-search-network

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio-data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - doc-search-network

  milvus:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.3.4
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - milvus-data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - etcd
      - minio
    networks:
      - doc-search-network

  # Bing MCP Server (using the official implementation)
  # bing-mcp-server:
  #   build:
  #     context: ./services/bing-mcp-server
  #     dockerfile: Dockerfile
  #   env_file:
  #     - .env
  #   environment:
  #     - BING_API_KEY=${BING_API_KEY}
  #     - BING_API_URL=https://api.bing.microsoft.com/
  #     - PORT=8080
  #   ports:
  #     - "8080:8080"
  #   networks:
  #     - doc-search-network
  #   restart: unless-stopped

  # Document Service
  document-service:
    container_name: document-service
    build: 
      context: ./services/document-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    depends_on:
      milvus:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
      - EMBEDDING_MODEL_NAME=${EMBEDDING_MODEL_NAME:-BAAI/bge-large-en-v1.5}
      - CHUNK_SIZE=${CHUNK_SIZE:-1000}
      - CHUNK_OVERLAP=${CHUNK_OVERLAP:-200}
      - DEFAULT_TOP_K=${DEFAULT_TOP_K:-5}
    volumes:
      - ./data/documents:/app/documents
      - documents-data:/app/data
    networks:
      - doc-search-network
    restart: unless-stopped

  # LLM Service with VLLM
  llm-service:
    container_name: llm-service
    build: 
      context: ./services/llm-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    env_file:
      - .env
    environment:
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
      - GPU_MEMORY_UTILIZATION=${GPU_MEMORY_UTILIZATION:-0.8}
      - MAX_MODEL_LEN=${MAX_MODEL_LEN:-4096}
      - TENSOR_PARALLEL_SIZE=${TENSOR_PARALLEL_SIZE:-1}
      - LLM_MODEL_NAME=${LLM_MODEL_NAME:-Qwen/Qwen3-30B-A3B-Instruct-2507}
      - DEFAULT_MAX_TOKENS=${DEFAULT_MAX_TOKENS:-512}
      - DEFAULT_TEMPERATURE=${DEFAULT_TEMPERATURE:-0.7}
    networks:
      - doc-search-network
    restart: unless-stopped

  # Web Search Service
  # web-search-service:
  #   build: 
  #     context: ./services/web-search-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8003:8003"
  #   # depends_on:
  #   #   - bing-mcp-server
  #   env_file:
  #     - .env
  #   environment:
  #     - MCP_SERVER_URL=http://bing-mcp-server:8080
  #     - BING_API_KEY=${BING_API_KEY}
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  # API Gateway
  api-gateway:
    container_name: api-gateway
    build: 
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - document-service
      - llm-service
      # - web-search-service
    env_file:
      - .env
    environment:
      - DOCUMENT_SERVICE_URL=http://document-service:8001
      - LLM_SERVICE_URL=http://llm-service:8002
      # - WEB_SEARCH_SERVICE_URL=http://web-search-service:8003
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS:-10}
    networks:
      - doc-search-network
    restart: unless-stopped

  # Frontend
  frontend:
    container_name: frontend
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    # command: ["nginx", "-t"]
    ports:
      - "3000:80"
    depends_on:
      - api-gateway
    env_file:
      - .env
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
      - REACT_APP_ENVIRONMENT=${REACT_APP_ENVIRONMENT:-development}
    networks:
      - doc-search-network
    restart: unless-stopped

networks:
  doc-search-network:
    driver: bridge
    name: doc-search-network

volumes:
  documents-data:
    driver: local
  milvus-data:
    driver: local
  etcd-data:
    driver: local
  minio-data:
    driver: local